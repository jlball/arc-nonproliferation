import openmc
from openmc.deplete import Results
import matplotlib.pyplot as plt
import matplotlib.colors as colors
import matplotlib as mpl
import numpy as np
import sys
from arc_nonproliferation.postprocess import *
from arc_nonproliferation.constants import *
from scipy.optimize import curve_fit
from scipy.stats import linregress
from numpy.polynomial.polynomial import Polynomial

"""
This script generates figures from data generated by the script:

independent-depletion-arc-1.py

These figures include the time needed to breed 1 SQ of fissile material
as a function of fertile mass dissolved in the blanket, and fissile mass
vs. time for each fertile inventory simulated.

This script is broken up into two major parts: 
1. Extraction of data from statepoint and results files in the 
output directory specified
2. Analysis and plotting of the extracted data.

All figures are saved in a new directory created within the specified 
simulation directory called 'figures'.

Usage: Call the script from the command line, with the additional
command line argument of the name of the output directory produced
by independent-depletion-arc-1.py you wish to analyze:

python3 pp-independent-depletion-arc-1.py <output_directory_name>

"""

# get base directory from command line argument
if sys.argv[1] is not None:
    base_dir = './' + sys.argv[1]
else:
    raise ValueError("No base directory specified!")

openmc.config['chain_file'] = anp.constants.chain_file

# ====================================================
# Extract Data
# ====================================================

# +~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+
# Time to 1 Significant Quantity

""" Load masses and initialisze final output arrays """
masses = np.loadtxt(base_dir + '/masses.txt')

U_time_to_SQ = np.empty(len(masses))
Th_time_to_SQ = np.empty(len(masses))

""" Iterate through each mass simulated and compute time to SQ"""
for i, mass in enumerate(masses):

    """ Extract time to 1 SQ for Uranium """
    os.chdir(base_dir + "/Uranium/" + str(mass))

    U_results = Results('depletion_results.h5')
    U_time_to_SQ[i] = extract_time_to_sq('U', U_results)

    #While we're here, get the number of depletion steps:
    time_steps = U_results.get_times()
    num_steps = len(time_steps)

    os.chdir("../../..")

    """ Extract time to 1 SQ for Thorium """
    os.chdir(base_dir + "/Thorium/" + str(mass))

    Th_results = Results('depletion_results.h5')
    Th_time_to_SQ[i] = extract_time_to_sq('Th', Th_results)

    os.chdir("../../..")

# +~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+
# Fissile Mass

""" Iterate through each mass simulated and get fissile mass at each time step"""
U_fissile_masses = np.empty((len(masses), len(time_steps)))
Th_fissile_masses = np.empty((len(masses), len(time_steps)))
for i, mass in enumerate(masses):

    os.chdir(base_dir + "/Uranium/" + str(mass))

    U_results = Results('depletion_results.h5')
    U_fissile_masses[i] = get_masses_from_mats('Pu239', U_results)

    os.chdir("../../..")

    os.chdir(base_dir + "/Thorium/" + str(mass))

    Th_results = Results('depletion_results.h5')
    Th_fissile_masses[i] = get_masses_from_mats('U233', Th_results)

    os.chdir("../../..")



# +~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+
# Decay Photon Spectrum

# U_decay_spectra_channels = []
# U_decay_spectra_blanket = []

# Th_decay_spectra_channels = []
# Th_decay_spectra_blanket = []

# for i in range(0, num_steps):
#     """ Uranium """
#     os.chdir(base_dir + "/Uranium/" + str(mass))

#     U_results = Results('depletion_results.h5')
#     U_mats = U_results.export_to_materials(i)

#     flibe_mat_channels = get_material_by_name(U_mats, "doped flibe channels")
#     flibe_mat_blanket = get_material_by_name(U_mats, "doped flibe blanket")

#     U_decay_spectra_channels.append(flibe_mat_channels.decay_photon_energy)
#     U_decay_spectra_blanket.append(flibe_mat_blanket.decay_photon_energy)

#     os.chdir('../../..')

#     """ Thorium """
#     os.chdir(base_dir + "/Thorium/" + str(mass))

#     Th_results = Results('depletion_results.h5')
#     Th_mats = Th_results.export_to_materials(i)

#     flibe_mat_channels = get_material_by_name(Th_mats, "doped flibe channels")
#     flibe_mat_blanket = get_material_by_name(Th_mats, "doped flibe blanket")

#     Th_decay_spectra_channels.append(flibe_mat_channels.decay_photon_energy)
#     Th_decay_spectra_blanket.append(flibe_mat_blanket.decay_photon_energy)

#     os.chdir('../../..')

# +~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+
# Isotopic Purity

U_purities = np.empty(len(masses))
Th_purities = np.empty(len(masses))

for i, mass in enumerate(masses):
    """ Uranium """
    os.chdir(base_dir + "/Uranium/" + str(mass))

    U_results = Results('depletion_results.h5')
    U_purity = extract_isotopic_purity("U", U_results)
    U_purities[i] = U_purity[-1]

    os.chdir('../../..')

    """ Thorium """
    os.chdir(base_dir + "/Thorium/" + str(mass))

    Th_results = Results('depletion_results.h5')
    Th_purity = extract_isotopic_purity("Th", Th_results)
    Th_purities[i] = Th_purity[-1]

    os.chdir('../../..')

# ====================================================
# Plotting
# ====================================================

masses = masses / 1e3 #convert from kg to metric tons

#Change into dedicated directory for figures or create figures directory
try:
    os.chdir(base_dir + "/figures")
except:
    os.mkdir(base_dir + "/figures")
    os.chdir(base_dir + "/figures")

# +~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+
# Time to 1 Significant Quantity

fig, ax = plt.subplots()
ax.spines["top"].set_color("None")
ax.spines["right"].set_color("None")

ax.scatter(masses, U_time_to_SQ/24, label="$^{238}$U", marker='o', color='r')
ax.scatter(masses, Th_time_to_SQ/24, label="$^{232}$Th", marker='s', color='g')

ax.set_ylim(10, 200)

np.save("U_time_to_SQ_depletion", U_time_to_SQ)
np.save("Th_time_to_SQ_depletion", Th_time_to_SQ)

# Fit data to 1/x function:
def fit(x, A, B, C):
    return (A/x) + (C/x**2) + B

U_popt, U_pcov = curve_fit(fit, masses, U_time_to_SQ)
Th_popt, Th_pcov = curve_fit(fit, masses, Th_time_to_SQ)

fit_masses = np.linspace(1, masses[-1], num=100)
ax.plot(fit_masses, fit(fit_masses, *U_popt)/24, alpha=0.3, color='r')
ax.plot(fit_masses, fit(fit_masses, *Th_popt)/24, alpha=0.3, color='g')

ax.legend()

ax.set_xlim(0, masses[-1] + 2)
ax.set_ylim(10, np.max(Th_time_to_SQ/24) + 100)

ax.set_yscale("log")

ax.set_title("Time to Breed a Significant Quantity of Fissile Material", fontsize=14)
ax.set_ylabel("Time (days)", fontsize=14)
ax.set_xlabel("Mass of Fertile Material (metric tons)", fontsize=14)

fig.savefig("time_to_sq.png", dpi=300)

# +~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+
# Fissile Mass

fig_tot, ax_tot = plt.subplots()
ax_tot.spines["top"].set_color("None")
ax_tot.spines["right"].set_color("None")

U_cm = mpl.cm.Reds
Th_cm = mpl.cm.Greens

norm = colors.Normalize(vmin=-10, vmax=masses.max() + 10)

for i, mass in enumerate(masses):
    # Individual plot for this mass
    fig, ax = plt.subplots()

    ax.plot(time_steps, U_fissile_masses[i], label="Pu239")
    ax.plot(time_steps, Th_fissile_masses[i], label="U233")

    U_fit = Polynomial.fit(time_steps, U_fissile_masses[i], 4)
    Th_fit = Polynomial.fit(time_steps, Th_fissile_masses[i], 4)

    ax.plot(time_steps, U_fit.__call__(time_steps), alpha=0.5)
    ax.plot(time_steps, Th_fit.__call__(time_steps), alpha=0.5)

    ax.set_xlabel("Time (days)")
    ax.set_ylabel("Mass (kg)")
    ax.set_title("Fissile Mass vs. Time for a Fertile Mass of " + str(mass) + " metric tons")

    ax.legend()

    fig.savefig(str(mass) + "_metric_tons.png", dpi=300)

    # Add this mass to the total plot
    U_color = U_cm.__call__(norm(mass))
    Th_color = Th_cm.__call__(norm(mass))

    ax_tot.plot(time_steps, U_fissile_masses[i], label=str(mass), color=U_color)
    ax_tot.plot(time_steps, Th_fissile_masses[i], label=str(mass), color=Th_color)

ax_tot.set_xlabel("Time (days)")
ax_tot.set_ylabel("Mass (kg)")
ax_tot.set_title("Fissile Mass vs. Time")

ax_tot.set_yscale("linear")

fig_tot.savefig("all_masses.png", dpi=300)

# +~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+
# Decay Photon Spectrum

# Uranium

# fig, axs = plt.subplots(1, 2)

# for ax in axs:
#     ax.spines["top"].set_color("None")
#     ax.spines["right"].set_color("None")

#     ax.set_yscale("log")

#     ax.set_ylim(1e15, 1e19)
#     ax.set_xlim(0, 3)
#     ax.set_xlabel("Photon Energy (MeV)")

# for i in range(0, num_steps):
#     axs[0].step(U_decay_spectra_channels[i].x/1e6, U_decay_spectra_channels[i].p, label = str("Step " + str(int(i))))
#     axs[1].step(U_decay_spectra_blanket[i].x/1e6, U_decay_spectra_blanket[i].p, label = str("Step " + str(int(i))))
    
# axs[0].set_title("Gamma spectrum in a Uranium doped cooling channel")
# axs[1].set_title("Gamma spectrum in a Uranium doped blanket")

# fig.set_size_inches(10, 4)
# fig.savefig("U_decay_spectra.png")

# Thorium:

# fig, ax = plt.subplots()
# ax.spines["top"].set_color("None")
# ax.spines["right"].set_color("None")

# for i, dist in enumerate(Th_decay_spectra):
#     ax.step(dist.x, dist.p, label = str("Step " + str(int(i))))

# ax.set_yscale("log")

# ax.set_title("Gamma spectrum at $t_{SQ}$ in a Thorium doped blanket")
# ax.set_xlabel("Photon Energy (eV)")

# ax.set_ylim(1e15, 1e22)

# fig.savefig("Th_decay_spectra.png")

# +~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+~+
# Isotopic Purity

fig, ax = plt.subplots()
ax.spines["top"].set_color("None")
ax.spines["right"].set_color("None")

ax.scatter(masses, U_purities*100, label = "Pu239", color='r')
ax.scatter(masses, Th_purities*100, label = "U233", color='g')

ax.legend()

ax.set_title("Isotopic Purity vs. Fertile Inventory", fontsize=14)
ax.set_ylabel("Isotopic Purity (\% fissile isotope)", fontsize=14)
ax.set_xlabel("Fertile Mass (metric tons)", fontsize=14)

fig.savefig("isotopic_purity.png")


fig, ax = plt.subplots()
ax.spines["top"].set_color("None")
ax.spines["right"].set_color("None")


